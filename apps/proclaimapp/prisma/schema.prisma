generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    ClaimsCreated Claim[]   @relation("ClaimsCreated")
    ClaimsSettled Claim[]   @relation("ClaimsSettled")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ClaimType {
    Payable
    Receivable
}

enum SysUser {
    SYSTEM
    USER
}

model Team {
    id              Int     @id @default(autoincrement())
    market          String
    account         Int
    contractAddress String
    name            String
    stp             Boolean @default(true)
    slug            String
    Claim           Claim[]

    @@map("teams")
}

model Claim {
    id                        Int               @id @default(autoincrement())
    tradeReference            String            @unique
    corporateAction           String
    corporateActionID         String
    eventRate                 Float
    payDate                   DateTime
    quantity                  BigInt
    contractualSettlementDate DateTime
    actualSettlementDate      DateTime
    amount                    Float
    currency                  String
    counterparty              String
    owner                     String
    market                    String
    uploaded                  Boolean?
    settled                   Boolean           @default(false)
    createdBy                 SysUser           @default(SYSTEM)
    settledBy                 SysUser?
    encryptedClaimData        String
    hash                      String?           @unique
    transaction               String?
    transactionLog            Int?
    settlementError           BlockchainError[]
    settledDate               DateTime?
    createdDate               DateTime
    type                      ClaimType
    userCreateId              String?
    userSettleId              String?
    creator                   User?             @relation("ClaimsCreated", fields: [creatorId], references: [id])
    settler                   User?             @relation("ClaimsSettled", fields: [settlerId], references: [id])
    creatorId                 String?
    settlerId                 String?
    teamId                    Int // Foreign key to Team
    team                      Team              @relation(fields: [teamId], references: [id]) // Establish the relationship
    blockchainErrorId         Int?

    @@map("dummy_claims")
}

model BlockchainError {
    id              Int      @id @default(autoincrement())
    eventName       String
    contractAddress String
    transactionHash String
    reason          String
    createdAt       DateTime @default(now())
    claim           Claim    @relation(fields: [claimId], references: [id])
    claimId         Int
}

model TokenRequest {
    id          Int      @id @default(autoincrement())
    amount      Int
    token       String
    transaction String
    createdAt   DateTime @default(now())
}
